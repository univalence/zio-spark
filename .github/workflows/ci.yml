name: Univalence Continuous Integration

on:
  pull_request:
  push:
    branches: ["master"]
    tags: ["v*.*.*"]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Download sources
        run: sbt updateClassifiers
      - name: Check formatting and linting
        run: sbt "-Dfatal-warnings=true" check

  example:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        example: [ "SimpleApp", "SparkCodeMigration", "UsingOlderSparkVersion", "WordCount", "ZIOEcosystem" ]
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Run example
        run: sbt "project example${{ matrix.example }}" run

  documentation:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: website/package-lock.json
      - name: Install dependencies
        working-directory: website
        run: npm ci
      - name: Build documentation
        working-directory: website
        run: npm run build

  test:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        scala: ["2.12.x", "2.13.x", "3.x"]
        project: [ "coreTests", "test" ]
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Run tests
        if: ${{ !startsWith(matrix.scala, '2.13.') || matrix.project != 'coreTests' }}
        run: sbt ++${{ matrix.scala }}! "project ${{ matrix.project }}" testSpecific
      - name: Run tests 2.13.X with coverage
        if: ${{ startsWith(matrix.scala, '2.13.') && matrix.project == 'coreTests' }}
        run: sbt ++${{ matrix.scala }}! "project coreTests" testSpecificWithCoverage
      - name: Publish coverage to codecov
        if: ${{ startsWith(matrix.scala, '2.13.') && matrix.project == 'coreTests' }}
        uses: codecov/codecov-action@v2

  check-codegen:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Check formatting and linting
        working-directory: ./zio-spark-codegen
        run: sbt check

  test-codegen:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Cache scala dependencies
        uses: coursier/cache-action@v6
      - name: Run tests for codegen
        working-directory: ./zio-spark-codegen
        run: sbt test

  publish:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
    needs: [check, test, check-codegen, test-codegen]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup Scala and Java
        uses: olafurpg/setup-scala@v13
      - name: Publish the libraries
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}

  release:
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: [publish]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Create changes
        shell: bash
        run: touch CHANGES.md
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="${r//'%'/'%25'}"     # Multiline escape sequences for %
          r="${r//$'\n'/'%0A'}"   # Multiline escape sequences for '\n'
          r="${r//$'\r'/'%0D'}"   # Multiline escape sequences for '\r'
          echo "::set-output name=RELEASE_BODY::$r"
      - name: Create the release on github
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          body: ${{ steps.release.outputs.RELEASE_BODY }}
          draft: false
          prerelease: false
